AWSTemplateFormatVersion: "2010-09-09"

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "VPC Parameters"
        Parameters:
         - AvailabilityZoneA
         - AvailabilityZoneB
         - VPCCIDRBlock
         - PublicSubnetABlock
         - PublicSubnetBBlock
         - PrivateSubnetABlock
         - PrivateSubnetBBlock
         - TGWSubnetABlock
         - TGWSubnetBBlock
         - DefaultRouteBlock
         - VPC1CIDRBlock
         - VPC2CIDRBlock
         - VPC3CIDRBlock
         - VPCEndpointServiceName2
         - InstanceType

##################################################################################################################################
# Create-Parameters : AZ,VPC CIDR Blcok, Public,Private,TGW Subnet Block, InstanceType, VPC,VPC01,02,03,Defualt Route CIDR Block #
##################################################################################################################################

Parameters:
  AvailabilityZoneA:
    Description: "Choose AZ1 for your VPC."
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2a"

  AvailabilityZoneB:
    Description: "Choose AZ2 for your VPC."
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2b"

  VPCCIDRBlock:
    Type: String
    Default: 10.11.0.0/16
    Description: "The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range."

  PublicSubnetABlock:
    Type: String
    Default: 10.11.11.0/24
    Description: "CidrBlock for AZ A public subnet A within the VPC"   

  PublicSubnetBBlock:
    Type: String
    Default: 10.11.12.0/24
    Description: "CidrBlock for AZ B public subnet B within the VPC"

  PrivateSubnetABlock:
    Type: String
    Default: 10.11.21.0/24
    Description: "CidrBlock for AZ A private subnet A within the VPC"   

  PrivateSubnetBBlock:
    Type: String
    Default: 10.11.22.0/24
    Description: "CidrBlock for AZ B private subnet B within the VPC"

  TGWSubnetABlock:
    Type: String
    Default: 10.11.251.0/24
    Description: "CidrBlock for AZ A TGW subnet A within the VPC"   

  TGWSubnetBBlock:
    Type: String
    Default: 10.11.252.0/24
    Description: "CidrBlock for AZ B TGW subnet B within the VPC"

  DefaultRouteBlock:
    Type: String
    Default: 0.0.0.0/0
    Description: "Enter desired CIDR to Default route"

  VPC1CIDRBlock:
    Type: String
    Default: 10.1.0.0/16
    Description: "Enter desired CIDR to VPC1 route"

  VPC2CIDRBlock:
    Type: String
    Default: 10.2.0.0/16
    Description: "Enter desired CIDR to VPC2 route"

  VPC3CIDRBlock:
    Type: String
    Default: 10.3.0.0/16
    Description: "Enter desired CIDR to VPC3 route"

  VPCEndpointServiceName2:
    Type: String
    Description: Check the name of the VPC Endpoint Service in the GWLB VPC. 

  InstanceType:
    Type: String
    Default: t3.small
    Description: EC2 Instance Type for the VPC.

################################
# Create-Keypair : EC2 Keypair #
################################

#  KeyPair:
#    Description: "Keypair to access the EC2 Instance"
#    Type: "AWS::EC2::KeyPair::KeyName"
#    Default: "Your KeyPair"

##########################
# Create-AMI: EC2 AMI ID #
##########################

  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

###############################
# Create-Resource: Resource   #
###############################

Resources:

#####################
# Create-VPC : VPC #
#####################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDRBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
        - Key: project
          Value: !Sub '${AWS::StackName}'

###########################################
# Create-IGW: Create VPC InternetGateway #
###########################################

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

#############################################
# Create-NATGW: Create VPC NATGateway #
#############################################
  NatGatewayAEIP:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NATGW-A-EIP'

  NatGatewayA:
    DependsOn:
    - NatGatewayAEIP
    - PublicSubnetA
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayAEIP.AllocationId'
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NATGW-A'

  NatGatewayBEIP:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NATGW-B-EIP'

  NatGatewayB:
    DependsOn:
    - NatGatewayBEIP
    - PublicSubnetB
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayBEIP.AllocationId'
      SubnetId: !Ref PublicSubnetB
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NATGW-B'
###############################################
# Create-Public-Subnet: VPC Public_Subnet_a,b #
###############################################

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetABlock
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-Subnet-A'

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetBBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-Subnet-B'

################################################
# Create-RouteTable: VPCPublic Route Table    #
################################################

  PublicSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-A-RT'

  PublicSubnetRouteTableAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicSubnetARouteTable

  PublicRouteTableA1:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetARouteTable
      DestinationCidrBlock: !Ref DefaultRouteBlock
      GatewayId: !Ref InternetGateway

  PublicRouteTableA2:
    DependsOn: GWLBVPCEndpointA
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetARouteTable
      DestinationCidrBlock: !Ref VPC1CIDRBlock
      VpcEndpointId: !Ref GWLBVPCEndpointA

  PublicRouteTableA3:
    DependsOn: GWLBVPCEndpointA
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetARouteTable
      DestinationCidrBlock: !Ref VPC2CIDRBlock
      VpcEndpointId: !Ref GWLBVPCEndpointA

  PublicRouteTableA4:
    DependsOn: GWLBVPCEndpointA
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetARouteTable
      DestinationCidrBlock: !Ref VPC3CIDRBlock
      VpcEndpointId: !Ref GWLBVPCEndpointA

  PublicSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-B-RT'  

  PublicSubnetRouteTableBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicSubnetBRouteTable

  PublicRouteTableB1:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetBRouteTable
      DestinationCidrBlock: !Ref DefaultRouteBlock
      GatewayId: !Ref InternetGateway

  PublicRouteTableB2:
    DependsOn: GWLBVPCEndpointB
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetBRouteTable
      DestinationCidrBlock: !Ref VPC1CIDRBlock
      VpcEndpointId: !Ref GWLBVPCEndpointB

  PublicRouteTableB3:
    DependsOn: GWLBVPCEndpointB
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetBRouteTable
      DestinationCidrBlock: !Ref VPC2CIDRBlock
      VpcEndpointId: !Ref GWLBVPCEndpointB

  PublicRouteTableB4:
    DependsOn: GWLBVPCEndpointB
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetBRouteTable
      DestinationCidrBlock: !Ref VPC3CIDRBlock
      VpcEndpointId: !Ref GWLBVPCEndpointB

################################################
# Create-RouteTable: VPCPrivate Route Table    #
################################################

  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-A-RT'

  PrivateSubnetRouteTableAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateSubnetARouteTable

  PrivateRouteTableA1:
    DependsOn: NatGatewayA
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      DestinationCidrBlock: !Ref DefaultRouteBlock
      NatGatewayId: !Ref NatGatewayA

#################################################
# Create-Private-Subnet A and routing table     #
#################################################

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetABlock
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-Subnet-A'


  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-A-RT'

  PrivateSubnetRouteTableAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateSubnetARouteTable

  PrivateRouteTableA1:
    DependsOn: NatGatewayA
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      DestinationCidrBlock: !Ref DefaultRouteBlock
      NatGatewayId: !Ref NatGatewayA

#################################################
# Create-Private-Subnet B and routing table     #
#################################################
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetBBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-Subnet-B'
  
  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-B-RT'

  PrivateSubnetRouteTableBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateSubnetBRouteTable

  PrivateRouteTableB1:
    DependsOn: NatGatewayB
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetBRouteTable
      DestinationCidrBlock: !Ref DefaultRouteBlock
      NatGatewayId: !Ref NatGatewayB

#################################################
# Create-TGW-Subnet A and routing table         #
#################################################
  TGWSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref TGWSubnetABlock
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-TGW-Subnet-A'

  TGWSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-TGW-A-RT'

  TGWSubnetRouteTableAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TGWSubnetA
      RouteTableId: !Ref TGWSubnetARouteTable

  TGWRouteTableA1:
    DependsOn: GWLBVPCEndpointA
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref TGWSubnetARouteTable
      DestinationCidrBlock: !Ref DefaultRouteBlock
      VpcEndpointId: !Ref GWLBVPCEndpointA

#################################################
# Create-TGW-Subnet A and routing table         #
#################################################
  TGWSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref TGWSubnetBBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-TGW-Subnet-B'

  TGWSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-TGW-B-RT'

  TGWSubnetRouteTableBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TGWSubnetB
      RouteTableId: !Ref TGWSubnetBRouteTable

  TGWRouteTableB1:
    DependsOn: GWLBVPCEndpointB
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref TGWSubnetBRouteTable
      DestinationCidrBlock: !Ref DefaultRouteBlock
      VpcEndpointId: !Ref GWLBVPCEndpointB

###############################################
# Create-VPCEndPoint                          #
###############################################

  GWLBVPCEndpointA:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Ref VPCEndpointServiceName2
      VpcEndpointType: GatewayLoadBalancer
      SubnetIds:
        - !Ref PrivateSubnetA

  GWLBVPCEndpointB:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Ref VPCEndpointServiceName2
      VpcEndpointType: GatewayLoadBalancer
      SubnetIds:
        - !Ref PrivateSubnetB

###############
# VPC Outputs #
###############
Outputs:
  VPC:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}"

  PublicSubnetA:
    Description: PublicSubnetA
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-Public-Subnet-A"

  PublicSubnetB:
    Description: PublicSubnetB
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-Public-Subnet-B"
  
  PrivateSubnetA:
    Description: PublicSubnetA
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-Private-Subnet-A"

  PrivateSubnetB:
    Description: PublicSubnetB
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-Private-Subnet-B"

  TGWSubnetA:
    Description: TGWSubnetA
    Value: !Ref TGWSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-TGW-Subnet-A"

  TGWSubnetB:
    Description: TGWSubnetB
    Value: !Ref TGWSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-TGW-Subnet-B"

  PrivateSubnetARouteTable:
    Description: PrivateSubnetARouteTableID
    Value: !Ref PrivateSubnetARouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetARouteTableID"

  PrivateSubnetBRouteTable:
    Description: PrivateSubnetBRouteTableID
    Value: !Ref PrivateSubnetBRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetBRouteTableID"
